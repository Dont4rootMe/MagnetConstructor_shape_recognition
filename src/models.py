import numpy as np
import cv2 as cv
from itertools import combinations

CLASSES = [
    (1, [-4.394116453640939e-14, 0.0, 37.39290264705208, 75.42390801176631, 120.09115365718425, 183.32776882524612, 255.21022838983345, 319.9211931533875, 438.4078745674347, 497.7311439490928, 527.5347290610922, 648.5937184886644, 879.9829732898919, 1090.688567996594]),
    (4, [0.0, 1.0108182130694675e-15, 23.426757507882538, 57.24109451323346, 84.85955646657554, 90.93919268151484, 129.7826962401424, 141.9754866578036, 271.92000138508325, 290.1563267218745, 453.94915880412776, 525.900490447367, 567.7556386923495, 711.6697525508143, 1019.8975121854284, 1180.2854407134123]),
    (4, [0.0, 1.258974207437452e-14, 27.203606322833597, 31.877265909583976, 79.51079131503862, 145.86332436452946, 174.81087116840666, 201.9485734870342, 231.89405045508428, 324.8996464610077, 424.12534164196114, 496.4869316357347, 525.4350086759779, 596.1555427192201, 748.9110477435507, 1089.943403873581]),
    (4, [0.0, 2.3991759303516012e-14, 26.378727312282702, 29.70924559242457, 78.04942193555743, 158.93117774867613, 181.68266166863137, 206.6356862907957, 240.32381200291505, 276.33983791606835, 402.7498131341693, 482.04725301151905, 513.1240678562499, 559.2925761045211, 750.1975941482406, 1063.6472759076505]),
    (2, [0.0, 1.139119237717295e-13, 28.955633084833348, 52.455941603607286, 94.93842582050561, 133.30375899946748, 232.69797580631, 324.07924924809396, 348.7763823380949, 421.4067724742487, 521.2964624220211, 709.4253013442152, 792.9921735215102, 1152.3573146163349]),
    (2, [0.0, 5.2939230091389093e-14, 27.609844345422985, 44.9991041695625, 89.96580771622473, 124.86382874809757, 231.7084650811497, 270.4766615870891, 337.2878548252794, 368.74091589248076, 509.2061573132165, 704.784176919288, 814.8339895338892, 1111.4576776928584]),
    (3, [2.439021167818807e-13, 19.09325657316784, 45.47350259050349, 70.65861714527458, 97.51720030629546, 114.72102679554611, 157.63259923041147, 201.2089529370447, 223.7860436431971, 298.3640046225984, 354.9381555441321, 463.62790081502766, 517.4039780697714, 537.560034326077, 601.8049288798413, 672.9101293990535, 800.2930530073007, 854.4650296476435]),
    (3, [2.0312812554704092e-14, 17.612258974745323, 29.22828895442783, 40.985854841610326, 93.4470896789954, 104.02840270897204, 114.0695234905377, 149.71813639082393, 181.54542371696, 242.70700696, 254.8563518216426, 335.1656009826058, 404.47789957477556, 420.3669429646603, 469.13724763158046, 570.6818784200643, 606.2757418682312, 651.8264625013065, 736.3284933694853]),
    (3, [1.739591521195216e-13, 31.914478466401317, 56.24204407541587, 107.69017230881276, 127.67758550315516, 153.28792075966612, 253.85920453503465, 327.94638670965696, 415.6977325047677, 440.86924399917757, 532.5675646361233, 572.7800017070815, 700.2156155475477, 786.5386603615201, 922.8346353443841]),
    (4, [0.0, 1.0806163191137006e-13, 24.273800678954494, 66.29150268146003, 77.71487711032947, 99.39604112748397, 131.27211534505614, 203.58065127719976, 270.9467701200286, 338.176426628199, 541.2985522841599, 603.119455787041, 859.1739644271144, 1025.4410610862894, 1242.1204387740797]),
    (4, [0.0, 6.397397358686862e-14, 23.34017876830471, 58.93033957571042, 78.55932010542105, 88.49920140312389, 126.72445613018553, 144.41707632199365, 255.54189018592677, 272.8618449397102, 451.9312515955949, 518.0531021463374, 574.4912131177429, 734.6463125826697, 1014.1022362768061, 1177.897685445215]),
    (4, [2.152624850969076e-14, 23.830400066314606, 54.58704160557844, 64.85723545415144, 91.26716794828998, 121.16165441296566, 139.05746358250533, 198.6464923790435, 222.62501061615737, 293.9266016493643, 348.4797285479823, 490.13573655796455, 621.9102238909009, 690.6565439454943, 855.9897510176368, 998.4664542853594, 1371.809485492015]),
    (4, [0.0, 2.398052045731322e-14, 21.713097536984385, 52.70292859679839, 64.09098387991114, 104.61882052361881, 115.74067757921591, 141.99781414682158, 189.24585979730847, 286.71347429770236, 313.4733042522974, 454.54785679833935, 557.9744546253715, 626.027193824643, 756.0611679162447, 980.5734484499491, 1259.6645563006402]),
    (4, [-1.682615635364992e-13, 23.680194226820483, 47.14400834681266, 69.85464957857046, 75.05914881210629, 101.93438711729091, 128.63994324677387, 202.98587072498026, 314.9788723400074, 374.15958164967714, 494.9484664980335, 579.9843378438416, 725.078760722266, 821.9522794026615, 1090.099475054022, 1279.5935126944023]),
    (4, [3.7969627442180354e-14, 23.940721963010237, 64.43168680349456, 73.17682319923343, 89.906681928185, 100.00143806608949, 133.8841818690847, 159.35872283646677, 188.81392001322138, 253.65625802567374, 413.2557975644244, 460.0440774612402, 569.8892773331955, 797.1203320690851, 820.5250441060579, 1073.7346981557212]),
    (4, [-2.1775591393401e-13, 20.43595887208684, 31.889652757098485, 66.1376901292229, 84.90230274268923, 97.25977384813892, 126.58022269071895, 160.35810152570195, 218.6634276913308, 307.5608439723227, 332.14108369346803, 365.0048557399699, 469.1810434403391, 607.7990886933824, 678.5045978348719, 900.544681364502, 1030.243042611198]),
    (4, [1.2252404100333156e-13, 20.73105309187096, 50.063425810283704, 82.44818417992292, 84.70770486942963, 115.95285867205999, 140.13441236346716, 157.35145858379974, 236.47391073976164, 288.810818117635, 357.40390813289196, 415.6862148612271, 480.4767669238953, 566.792059020085, 773.2098457365715, 933.4510303882153, 1066.0400581657586]),
    (1, [5.2397833751273426e-14, 32.10124729148731, 65.14106369135322, 90.23224867983922, 111.5350867138431, 146.12445284917706, 241.43989825300622, 333.4919441598684, 361.7031485588612, 440.2112703126564, 483.81671293559066, 595.8846454882905, 699.1247881171063, 950.6386008567953, 1019.8388633917524]),
    (1, [-8.632835378757395e-14, 42.16364033107428, 74.5946115235887, 91.71682308912666, 118.68472423436891, 191.45903612014988, 283.9580147786813, 493.0351976665078, 528.009440707017, 637.6732875152454, 675.1963686819385, 1000.9912502659405, 1174.9297481609244]),
    (1, [-1.5889069573948866e-13, 29.930963078443817, 69.48577777218465, 101.01403939068781, 106.08575928732827, 117.69147361532316, 185.70516670399914, 247.2225779437668, 260.3487948778417, 328.53095913746967, 519.544308110751, 568.5426295138757, 707.2844861369825, 867.2252393698694, 1065.0551295297014]),
    (3, [-3.8965258230266686e-14, 50.33130019972773, 58.437902460754145, 96.59173933334608, 138.02901028267013, 166.94967437935983, 202.31966689239695, 324.3845355072703, 417.36328553009963, 464.89923514921884, 481.6415033167563, 708.512551162131, 783.504925501778, 959.2903541733456, 1042.2133048459634]),
    (3, [9.741890983872973e-14, 34.166571277087165, 51.22793364714648, 92.18334627609286, 108.79431800053611, 143.7762815635531, 209.2640001354964, 264.1820570158949, 341.4089358528657, 405.4666081753367, 440.6257599261249, 459.5727049060216, 526.0267010456445, 747.4662254271137, 889.857347782628, 961.2218376815129])
    (3, [3.5655746530534895e-14, 45.393092750649664, 53.662694792895564, 85.60749082194448, 116.13695933945743, 141.4030707976958, 182.59630679962993, 284.6350906378218, 360.8441556686768, 401.16420275122374, 453.89686329394925, 590.2998028171233, 727.5178997083023, 886.9436889441096, 963.9052258827662]),
    (3, [-5.794011646333144e-14, 42.19013686303279, 53.316690733402766, 83.33568750311404, 117.70667872196442, 142.8161151137765, 170.91601920451245, 282.3953976899028, 351.0545420324638, 424.4481561541127, 449.3750972966522, 610.7535543023236, 655.3312092356813, 879.8867174239327, 955.2847208936379]),
    (3, [8.640389293802768e-14, 23.294502013413677, 48.6037850027533, 75.74436592215936, 95.05433751538645, 138.35931618417086, 181.3135087510847, 224.9897174116148, 298.64754841344217, 367.33485375151946, 409.4767282754161, 428.7077083120125, 563.1042753141232, 609.379231726041, 686.233553233649, 951.9587220721012]),
    (3, [2.283785411217375e-13, 24.42772123014898, 41.24119791300592, 68.80784752279388, 104.05769444257965, 141.97740738781886, 206.88736452165872, 231.28467566627327, 263.53728492457526, 353.86446224722516, 404.5115660447672, 441.1201484713531, 592.8189788092453, 677.3214807810878, 763.8490852353833, 937.0077064339979]),
    (2, [-1.0542033475131645e-13, 24.58417553985026, 29.412992318745818, 41.084241807794214, 58.41794763265352, 123.165530954933, 177.0152461275985, 271.85035286437017, 306.39309856800867, 397.6871605356748, 417.23807159205006, 505.23579459941544, 576.4705336301168, 747.9139682984296, 821.1385931525638, 903.3016423486706]),
    (2, [-5.679411363011877e-15, 1.3115478823438423e-13, 12.034613279825892, 30.31627786744026, 44.58837961965754, 57.68882040742382, 93.16022543051888, 124.8892783594612, 226.82250309429267, 293.1488563211651, 390.76228019615957, 398.4622195645581, 492.55458336561964, 518.2696926147319, 625.4157240205452, 731.2568522728317, 869.9644832448273]),
    (2, [2.671196585976788e-13, 29.973140140734422, 42.30122022028026, 93.61719199576136, 116.00998851366067, 146.75007952883928, 201.61460735766047, 264.3403295680974, 312.6501277996466, 343.8637145320733, 498.5489034329665, 754.6114296069003, 904.46892246071, 1079.942452062248]),
    (2, [6.886400722547077e-14, 30.678664648822714, 42.7109523896259, 99.4816582299241, 117.19440163879953, 148.91700549580796, 212.8509422892564, 265.00473960788196, 314.55175037021803, 355.9329946206871, 500.1774737779633, 813.9931178697695, 904.9782216684298, 1065.076785344238]),
    (2, [-2.1076049976444637e-14, 21.07987245115952, 44.11828077664381, 64.78142432004296, 93.97311317357632, 191.91249008868263, 204.80530540759486, 218.04794124792085, 351.95419164762546, 361.43231187758033, 414.16060408077334, 570.6961374668103, 660.3982670375734, 983.240475249788]),
    (2, [-1.2602381500021414e-13, 21.148239649835006, 44.7344472978906, 67.12314983826386, 93.85508051149456, 190.5363992852633, 204.1768409870571, 215.48399614883257, 351.4021560925244, 365.28231406961595, 410.491669357416, 572.4756111369592, 656.8396607033161, 986.3834514394376])
]

def get_biggest_quantile_singulars(arr, quant=0.9):
    sum_norm = arr.sum()
    sorted_arr = np.sort(arr)
    percent_income = np.cumsum(sorted_arr) / sum_norm

    indexes_needed = percent_income >= (1 - quant)
    return sorted_arr[indexes_needed]

def singular_metric(sng1, sng2):
    k1 = get_biggest_quantile_singulars(sng1)
    k2 = get_biggest_quantile_singulars(sng2)
    min_len = np.minimum(len(k1), len(k2))

    return np.linalg.norm(k1[-min_len:] - k2[-min_len:])


def classificator(graph):
    vertexes = {g[0] for g in graph.keys()} | {g[1] for g in graph.keys()}
    connections = np.zeros((len(vertexes), len(vertexes)))
    for key, value in graph.items():
        connections[key[0], key[1]] = value
    connections += connections.T

    D = np.diag(np.sum(connections, axis=1))
    Laplasian = D - connections
    singulars = np.linalg.eigh(Laplasian)[0]
    
    pairs = [(cls, singular_metric(singulars, ref_sngl)) for cls, ref_sngl in CLASSES]  
    sorted_pairs = sorted(pairs, key=lambda p: p[1])[::-1][:5]
    class_indicator = np.full((4), np.inf)
    for p in sorted_pairs:
        class_indicator[p[0]] += p[1]

    return np.min(class_indicator)


def get_graph(Matrix: np.array) -> tuple[np.array, dict[dict[int, int], float]]:
    local_curve_kernel = np.ones((15, 15)) 
    local_curve_kernel[1:-1, 1:-1] = 0
    skeleton = np.where(Matrix[15:-15, 15:-15] > 0)

    skeleton_base = []
    for idx, idy in np.stack(skeleton, axis=-1) + 15:
        point_local = np.stack(np.where(Matrix[idx-7:idx+8, idy-7:idy+8] * local_curve_kernel > 0), axis=-1)
        if len(point_local) != 2:
            skeleton_base.append((idx, idy))
            continue

        end1 = point_local[0]
        end2 = point_local[1]

        A = (end1[0] - idx) ** 2 + (end1[1] - idy) ** 2
        B = (end2[0] - idx) ** 2 + (end2[1] - idy) ** 2
        C = (end1[0] - end2[0]) ** 2 + (end1[1] - end2[1]) ** 2
        angle = np.arccos((C - A - B) / (2 * np.sqrt(A * B)))

        if angle < 5 * np.pi / 6:
            skeleton_base.append((idx, idy))


    point_canvas = np.zeros_like(Matrix)
    for idx, idy in skeleton_base:
        cv.circle(point_canvas, (idy, idx), 20, 255, -1)
    _, _, _, centroids = cv.connectedComponentsWithStats(point_canvas)

    point_canvas = np.zeros_like(Matrix)
    points = []
    for center in centroids:
        c = (int(center[0]), int(center[1]))
        points.append(c)
        cv.circle(point_canvas, c, 30, 255, -1)
    points = np.array(points)

    connectivity = {}
    point_indexes = combinations(range(len(points)), 2)
    set_of_all_indexes = set(range(len(points)))
    k = 30
    for a_index, b_index in point_indexes:
        other_indexes = set_of_all_indexes - {a_index, b_index}
        a = points[a_index]
        b = points[b_index]

        canvas_without_other_dots = Matrix.copy()
        cv.circle(canvas_without_other_dots, a, 30, 255, -1)
        cv.circle(canvas_without_other_dots, b, 30, 255, -1)

        mask_over_all_other_points = np.zeros_like(Matrix)
        for i in other_indexes:
            cv.circle(mask_over_all_other_points, points[i], 30, 255, -1)
        canvas_without_other_dots[mask_over_all_other_points > 0] = 0

        _, labels, _, _ = cv.connectedComponentsWithStats(canvas_without_other_dots)
        connectivity[(a_index, b_index)] = np.linalg.norm(a - b) if labels[a[1], a[0]] == labels[b[1], b[0]] else 0

    result_canvas = Matrix.copy()
    for key, value in connectivity.items():
        if value > 0.:
            cv.circle(result_canvas, points[key[0]], 20, 255, -1)
            cv.circle(result_canvas, points[key[1]], 20, 255, -1)
            cv.line(result_canvas, points[key[0]], points[key[1]], 180, 10)

    return result_canvas, connectivity